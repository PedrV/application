/*
    "@Insert name, is a direct message application that enables users to communicate without revealing their identity to others on the internet nor having to worry about message logs. All messages are encrypted with a AES 128bit key followed by a 4096bit length RSA encryption.
    Copyright (C) 2020  Andre Silva

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

 */

package src;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

public class DoEncryption {

    // Encrypt a String message with Symetric Encryption (AES)
    public static byte[] doSymmetricEncryption(SecretKey key, byte[] iv, String msg) {
        return SymmetricEncryption.doAESEncryption(msg, key, iv);
    }

    // Encrypt a String message with Asymetric Encryption (RSA)
    public static byte[] doAsymmetricEncryption(byte[] msgSimEncrypt, RSAPublicKey pubkey) throws InvalidKeyException,
            NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        return AsymmetricEncryption.encrypt(msgSimEncrypt, pubkey);
    }

    // Encrypt a SecretKey of AES (symetric encryption) with Asymetric Encryption
    // (RSA)
    public static byte[] doAsymmetricEncryptionKEY(SecretKey key, RSAPublicKey pubkey) throws InvalidKeyException,
            NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        return AsymmetricEncryption.encrypt(key.getEncoded(), pubkey);
    }


    // Encrypt messages using the secret symmetric key random generated by the computer (known by the 2 parts) and after encrypts with the pubkey of the other user
    public static String doEncryption(String msg, SecretKey key, byte[] iv, RSAPublicKey pubkey)
            throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException,
            BadPaddingException, UnsupportedEncodingException {

        byte[] msgAES = doSymmetricEncryption(key, iv, msg);
        byte[] finalMSG = doAsymmetricEncryption(msgAES, pubkey);
        
        return new String(finalMSG, "UTF-8");
    }


    // Method that decrypts a message with a the user privKey and with the SymmetricKey received from the other person (person who makes the first contact)
    public static String doDecryption (String msg, SecretKey key, byte[] iv, RSAPrivateKey privkey) throws InvalidKeyException,
            NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {

        byte[] encryptedMSGArray = msg.getBytes();
        byte[] RSAdecrypted = AsymmetricEncryption.decrypt(encryptedMSGArray, privkey);
        return SymmetricEncryption.doAESDecryption(RSAdecrypted, key, iv);
    }

}
